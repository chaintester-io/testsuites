{
	"info": {
		"_postman_id": "bee3d02e-26ed-4930-b243-a892d8720cf3",
		"name": "ethereum-mainnet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25212076",
		"_collection_link": "https://blockchainnow.postman.co/workspace/hackathon-benchmark-comparison-~4d5e9b32-65a1-4a4b-b814-0c436e8fdbe2/collection/25212076-bee3d02e-26ed-4930-b243-a892d8720cf3?action=share&source=collection_link&creator=25212076"
	},
	"item": [
		{
			"name": "basics",
			"item": [
				{
					"name": "eth_blockNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_blockNumber\" , function () {  ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"result\");     ",
									"",
									"    var body = pm.response.json();",
									"    // save blockheight as global variable",
									"    pm.collectionVariables.set(\"blockheight\", body.result);  ",
									"",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"    pm.expect(body.result).is.not.to.equal(null);    ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_blockNumber\",\n    \"params\":[],\n    \"id\":83\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockByNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByNumber\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");",
									"    pm.expect(body.result).is.not.to.equal(null); ",
									"",
									"    // Save block, txid, address, addressto as variables",
									"    pm.collectionVariables.set(\"block\", body.result.hash);     ",
									"    pm.collectionVariables.set(\"txid\", body.result.transactions[0].hash);     ",
									"    pm.collectionVariables.set(\"address\", body.result.transactions[0].from);   ",
									"    pm.collectionVariables.set(\"addressto\", body.result.transactions[0].to);         ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"{{blockheight}}\", true],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_feeHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_feeHistory\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"oldestBlock\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);       ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_feeHistory\",\n  \"id\": 1,\n  \"params\": [\n    \"0x5\",\n    \"latest\",\n    [\n      10,\n      20,\n      30\n    ]\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBalance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBalance\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    ",
									"    // check that result contains 0x..",
									"    pm.expect(pm.response.text()).to.include(\"0x\");      ",
									"",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);         ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBalance\",\n    \"params\":[\"{{address}}\", \"latest\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getProof",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getProof\" , function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include(\"accountProof\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getProof\",\n    \"params\":[\"0x1234567890123456789012345678901234567890\",[\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\"latest\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getStorageAt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getStorageAt\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"result\");    ",
									"",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\": \"eth_getStorageAt\",\n    \"params\": [\"0x295a70b2de5e3953354a6a8344e616ed314d7251\", \"0x0\", \"latest\"],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getTransactionCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getTransactionCount\" , function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);           ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionCount\",\n    \"params\":[\"{{address}}\",\"latest\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockTransactionCountByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockTransactionCountByHash\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"result\");    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);        ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockTransactionCountByHash\",\n    \"params\":[\"{{block}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockTransactionCountByNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockTransactionCountByNumber\" , function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.expect(pm.response.text()).to.include(\"result\");     ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);         ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockTransactionCountByNumber\",\n    \"params\":[\"{{blockheight}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getUncleCountByBlockHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getUncleCountByBlockHash\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);             ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getUncleCountByBlockHash\",\n    \"params\":[\"{{block}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getUncleCountByBlockNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getUncleCountByBlockNumber\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);             ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getUncleCountByBlockNumber\",\n    \"params\":[\"{{blockheight}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getCode\" , function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);              ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getCode\",\n    \"params\":[\"{{address}}\", \"{{blockheight}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_sign",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_sign\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");",
									"    pm.expect(pm.response.text()).to.not.include(\"-32000\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);             ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_sign\",\n    \"params\": [\n        \"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\",\n        \"0xdeadbeaf\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_call\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);       ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_call\",\n        \"params\":[{\n        \"from\":\"{{address}}\"\n        },\"latest\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_estimateGas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_estimateGas\" , function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_estimateGas\",\n    \"params\":[{\"from\":\"0x8D97689C9818892B700e27F316cc3E41e17fBeb9\",\"to\":\"0xd3CdA913deB6f67967B99D67aCDFa1712C293601\",\"value\":\"0x186a0\"}],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByHash\" , function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.text()).to.include(\"hash\");    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);            ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByHash\",\n    \"params\":[\"{{block}}\", false],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getTransactionByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getTransactionByHash\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);         ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByHash\",\n    \"params\":[\"{{txid}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getTransactionByBlockHashAndIndex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getTransactionByBlockHashAndIndex\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);         ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByBlockHashAndIndex\",\n    \"params\":[\"{{block}}\", \"0x0\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getTransactionByBlockNumberAndIndex",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getTransactionByBlockNumberAndIndex\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"hash\"); ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);           ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\":[\"{{blockheight}}\", \"0x0\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getTransactionReceipt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getTransactionReceipt\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"blockHash\");    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);           ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionReceipt\",\n    \"params\":[\"{{txid}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getLogs\" , function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.expect(pm.response.text()).to.include(\"address\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);           ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getLogs\",\n    \"params\":[{\n        \"fromBlock\": \"{{blockheight}}\", \n        \"toBlock\": \"{{blockheight}}\"\n        }],\n    \"id\":74\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockReceipts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockReceipts\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    ",
									"    // check that response is not null",
									"    var body = pm.response.json(); ",
									"    pm.expect(body.result).is.not.to.equal(null);    ",
									"",
									"    //check thath response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"blockHash\");      ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockReceipts\",\n    \"params\":[\"{{blockheight}}\"],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_maxPriorityFeePerGas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_maxPriorityFeePerGas\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);              ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_maxPriorityFeePerGas\",\n    \"params\":[],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_chainId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_chainId\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"",
									"    //check that reponse contains from",
									"    pm.expect(pm.response.text()).to.include(\"result\"); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_chainId\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_gasPrice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_gasPrice\" , function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.expect(pm.response.text()).to.include(\"0x\");     ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);          ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_gasPrice\",\n    \"params\":[],\n    \"id\":73\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_storageRangeAt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_storageRangeAt\" , function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var body = pm.response.json();  ",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"    pm.expect(body.result).is.not.to.equal(null);  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_storageRangeAt\",\n    \"params\":[\"{{block}}\",0,\"{{address}}\",\"0x0000000000000000000000000000000000000000000000000000000000000000\",1],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber\" , function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var body = pm.response.json();  ",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"result\");",
									"    pm.expect(body.result).is.not.to.equal(null);  ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"debug_traceBlockByNumber\",\n    \"params\": [\n        \"{{blockheight}}\",\n        {\n            \"tracer\": \"callTracer\"\n        }\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByHash\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"result\");   ",
									"    pm.expect(pm.response.text()).is.not.null;   ",
									"    pm.expect(pm.response.text()).to.include(\"from\");       ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByHash\",\n    \"params\":[\"{{block}}\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceTransaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceTransaction\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"result\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);               ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceTransaction\",\n    \"params\":[\"{{txid}}\",\n        {\n            \"timeout\":\"60s\"\n        }\n    ],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_getBadBlocks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_getBadBlocks\", function () {",
									"    pm.response.to.have.status(200);   ",
									"",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");",
									"    pm.expect(pm.response.text()).to.not.include(\"-32000\"); ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_getBadBlocks\",\n    \"params\":[],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlock\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"",
									"    //check that reponse contains from",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");; ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlock\",\n    \"params\":[\"\"],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceCall",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceCall\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"gas\");   ",
									"    pm.expect(pm.response.text()).is.not.null;       ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceCall\",\n    \"params\":[{\"from\":\"{{address}}\",\"to\":\"{{addressto}}\"}, \"{{blockheight}}\"],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_rawTransaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_rawTransaction\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");",
									"    pm.expect(pm.response.text()).to.not.include(\"-32000\");  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_rawTransaction\",\n    \"params\":[\"{{txid}}\",[\"trace\"]],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_block",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_block\" , function () {",
									"        pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains from",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);    ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_block\",\n    \"params\":[\"{{blockheight}}\"],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_call",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_call\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains from",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                         ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_call\",\n    \"params\":[{\"from\":null,\"to\":\"0x6b175474e89094c44da98b954eedeac495271d0f\",\"data\":\"0x70a082310000000000000000000000006E0d01A76C3Cf4288372a29124A26D4353EE51BE\"},[\"trace\"], \"latest\"],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_callMany",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_callMany\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains from",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                         ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_callMany\",\n    \"params\":[[[{\"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\"value\":\"0x186a0\"},[\"trace\"]],[{\"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\"to\":\"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\"value\":\"0x186a0\"},[\"trace\"]]],\"latest\"],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_replayBlockTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_replayBlockTransactions\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains hash",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                         ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_replayBlockTransactions\",\n    \"params\":[\"{{blockheight}}\",[\"trace\"]],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_replayTransaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_replayTransaction\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains hash",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                        ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_replayTransaction\",\n    \"params\":[\"{{txid}}\",[\"trace\"]],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "trace_transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"trace_transaction\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    //check that reponse contains hash",
									"    pm.expect(pm.response.text()).to.include(\"from\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                        ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"trace_transaction\",\n    \"params\":[\"{{txid}}\"],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "others",
			"item": [
				{
					"name": "web3_clientVersion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"web3_clientVersion\" , function () {",
									"    pm.response.to.have.status(200);  ",
									"    pm.expect(pm.response.text()).to.include(\"result\");          ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"web3_clientVersion\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "net_listening",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"net_listening\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");",
									"    pm.expect(pm.response.text()).to.not.include(\"-32000\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"net_listening\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "txpool_content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"txpool_content\" , function () {",
									"    pm.response.to.have.status(200); ",
									"    pm.expect(pm.response.text()).to.include(\"result\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);                ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"txpool_content\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "txpool_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"txpool_status\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.include(\"result\");  ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);              ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"txpool_status\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "txpool_inspect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"txpool_inspect\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    pm.expect(pm.response.text()).to.not.include(\"-32601\");",
									"    pm.expect(pm.response.text()).to.not.include(\"-32000\");     ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);              ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"txpool_inspect\",\n    \"params\":[],\n    \"id\":67\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "batch test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"batch call\" , function () {",
									"    pm.response.to.have.status(200);   ",
									"    //check that reponse contains hash",
									"    pm.expect(pm.response.text()).to.include(\"result\"); ",
									"    ",
									"    //check that reponse is not null",
									"    var body = pm.response.json();    ",
									"    pm.expect(body.result).is.not.to.equal(null);   ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBalance\",\n    \"params\":[\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"],\n    \"id\":1\n},\n{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBalance\",\n    \"params\":[\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"],\n    \"id\":2\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "history",
			"item": [
				{
					"name": "eth_getBlockByNumber BLOCK 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByNumber\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"0x1\", true],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockByNumber BLOCK 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByNumber 10\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"0xA\", true],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockByNumber BLOCK 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByNumber 100\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"0x64\", true],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "eth_getBlockByNumber BLOCK 1000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"eth_getBlockByNumber 1000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"hash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"0xF4240\", true],\n    \"id\":1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 100004",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 100004\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0x186A4\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 1000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 1000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0xF4240\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 5000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 5000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0x4C4B40\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 10000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 10000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0x989680\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 12000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 12000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0xB71B00\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 14000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 14000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0xD59F80\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 16000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 16000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0xF42400\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 18000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 18000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0x112A880\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "debug_traceBlockByNumber BLOCK 20000000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"debug_traceBlockByNumber 20000000\" , function () {",
									"    //check that response is 200",
									"    pm.response.to.have.status(200);",
									"",
									"    // Check that response contains any hash  ",
									"    pm.expect(pm.response.text()).to.include(\"txHash\");   ",
									"    ",
									"    // Check that response is not null",
									"    var body = pm.response.json();  ",
									"    pm.expect(body.result).to.not.be.null;                    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"0x1312D00\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "blockheight",
			"value": ""
		},
		{
			"key": "block",
			"value": ""
		},
		{
			"key": "txid",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "addressto",
			"value": ""
		}
	]
}